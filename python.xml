<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.32">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.9"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.9">
      <jobProperties/>
      <triggers>
        <string>hudson.triggers.SCMTrigger</string>
      </triggers>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <hudson.triggers.SCMTrigger>
          <spec>* * * * *</spec>
          <ignorePostCommitHooks>false</ignorePostCommitHooks>
        </hudson.triggers.SCMTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.70">
    <script>pipeline {
  environment {
    registry = &quot;reist/trg&quot;
    registryCredential = &apos;dockerhub_cred&apos;
    dockerImage = &apos;&apos;
  }
  agent any
  triggers {
    pollSCM &apos;* * * * *&apos;
    }  
  stages {
    stage(&apos;Cloning Git&apos;) {
      steps {
        git &apos;https://github.com/ilyareist/lab-devops.git&apos;
      }
    }
    
    stage(&apos;Building image&apos;) {
      steps{
        script {
          tag = &quot;latest&quot;
          dockerImage = docker.build registry + &quot;:&quot; + tag
        }
      }
    }
    
    stage(&apos;Test&apos;) {
      steps{
         script {
            sh &quot;docker run $registry:$tag test&quot;
        }
      }
    }

    
    stage(&apos;Upload Image&apos;) {
      steps{
         script {
            docker.withRegistry( &apos;&apos;, registryCredential ) {
            dockerImage.push()
          }
        }
      }
    }
    stage(&apos;Remove Unused docker image&apos;) {
      steps{
        script {
          sh &quot;docker rmi $registry:$tag&quot;
        }
      }
    }
  }
}</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>